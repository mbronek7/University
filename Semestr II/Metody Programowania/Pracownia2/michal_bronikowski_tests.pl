% Definiujemy moduł zawierający testy.
% Należy zmienić nazwę modułu na {imie}_{nazwisko}_tests gdzie za
% {imie} i {nazwisko} należy podstawić odpowiednio swoje imię
% i nazwisko bez wielkich liter oraz znaków diakrytycznych
:- module(michal_bronikowski_tests, [resolve_tests/5, prove_tests/4]).

% definiujemy operatory ~/1 oraz v/2
:- op(200, fx, ~).
:- op(500, xfy, v).

% Zbiór faktów definiujących testy dla predykatu resolve
% Należy zdefiniować swoje testy
resolve_tests(simple_test, q, p v q, ~q v r, p v r).
resolve_tests(simple_test2, p, p v q, ~q v ~r v ~p, q v ~q v ~r).
resolve_tests(simple_test3, q, p v q, ~q v ~r, p v ~r).
resolve_tests(simple_test4, f, f v g v h v j,r v t v y v u v j v i v o v p v ~f,g v h v j v r v t v y v u v j v i v o v p).
resolve_tests(simple_test5, r, p v t v r, ~q v ~r, p v t v ~q).
resolve_tests(simple_test6, p, p v q, ~p, q).
resolve_tests(simple_test7,a, a v b,~a v c, b v c).
resolve_tests(simple_test8,c,c v b v n v g v m v j v k v l v q v w v e v r v t v y v u v i v o v p,~c,b v n v g v m v j v k v l v q v w v e v r v t v y v u v i v o v p ).
resolve_tests(test, p, p v ~p v s v f v ~p v p, d v g v ~p v p v p v p, ~p v s v f v d v g v p ).
resolve_tests(duplicates,q,q v q v q v q v q v q v q v f,~f v h v ~q v ~q,f v ~f v h).
resolve_tests(empty_result,q,q,~q,[]).
% Zbiór faktów definiujących testy dla predykatu prove
% Należy zdefiniować swoje testy
prove_tests(example, validity, [p v q v ~r, ~p v q, r v q, ~q, p], unsat).
prove_tests(abberant,validity,[p v s, ~s v r, ~p v r , ~r v z, ~z],unsat).
prove_tests(simple_test,validity,[p v t v z],sat).
prove_tests(empty_clause,validity,[p v t , ~z, [], r],unsat).
prove_tests(simple_unsat_validity,validity,[p v t , ~p, ~t],unsat).
prove_tests(simple_unsat_validity2,validity,[p v t , ~p, ~t v z, ~z v c, ~c, t v c v p v p],unsat).
prove_tests(excluded_middle, validity, [p v ~p], sat).
prove_tests(simple_sat_test, validity, [p v ~p v h, h v p, ~p v h], sat).
prove_tests(simple_sat_test2, validity,[p v ~p v h, h v p, ~p v h, h v g v t v r v s  v m v b v y, f, ~f v ~m v b], sat).
prove_tests(simple_sat_test3, validity,[a v c,~c v p,~a v ~p,p,~a v ~c], sat).
prove_tests(am_i_naive_implementation_for_one,validity,[~p],sat).
prove_tests(am_i_naive_implementation_for_two,validity,[~p ,p],unsat).
prove_tests(simple_unsat, validity,[p,t v b v g v j, t v g v s,p v ~p,~p], unsat).
prove_tests(some_test_from_first_task, validity,[p,t v b v g v j, t v g v s,p v ~p,~p], unsat).
prove_tests(four_variables_no_solution, validity,[p v t v z v q , a v b v c v q,~p,~t,~z,~q,~a,~b,~c,~q], unsat).
prove_tests(all_empty, performance, [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], unsat).
prove_tests(negation, performance,[a1 v a2 v a3 v a4 v a5 v a6 v a7 v a8 v a9 v a10 v a11 v a12 v a13 v a14 v a15 v a16 v a17 v a18 v a19 v a20 v a21 v a22 v a23 v a24, ~a1 v ~a2 v ~a3 v ~a4 v ~a5 v ~a6 v ~a7 v ~a8 v ~a9 v ~a10 v ~a11 v ~a12 v ~a13 v ~a14 v ~a15 v ~a16 v ~a17 v ~a18 v ~a19 v ~a20 v ~a21 v ~a22 v ~a23 v ~a24], sat).
prove_tests(speed_test1,performance,[p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g],sat).
prove_tests(speed_test2,performance,[p v b v c v f v g v h v j v e v w v q v r v t ],sat).
prove_tests(am_i_naive_implementation,validity,[p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p v p],sat).
prove_tests(seven_variables,validity,[p v s , t , f , e , q , f v ~s],sat).
prove_tests(performance_test,performance,[p v b v c v f v g v h v j v e v w v q v r v t ],sat).
prove_tests(performance_test_lot_of_clauses,performance,[p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f],unsat).
prove_tests(performance_test_lot_of_clauses2,performance,[p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,k v l v m],unsat).
prove_tests(big_test,performance,[p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g],unsat).
prove_tests(even_bigger_test,performance,[p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g],unsat).
prove_tests(the_biggest_one,performance,[p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,p,~p,~s,~t,s,t,~q,q,~a,a,~z,z,x,~x,c,~c,~d,d,~b,~e,b,e,t,~t,y,~y,m,~m,n,~n,o,~o,i,~i,f,~f, b v c , a , p v t v s v e v ~e v a, a v b v c v d v e v f v r,p v q , r v s , t v p v q v s,t v ~q v x v g v t, c v b v t v r v w , ~r v ~t v ~s v ~y, ~w v g,z,c,b,n,n,b,t,y,u,i,n,j,k,l,m,n,o,p,a,s,d,f],unsat).
prove_tests(the_big_one,performance,[p v c v f v g v b v h v t, ~t, f v f v o v p, k v g v f v d v c v a ,q v r v t v u,~u v w v d v o v p, h v u v j v k v l v o v y, g v t v r v e v c v x, b v u v o v u, t v f, g v d v c v s v n v m, j v u v j v o v p v r v b v h v d v p v e v y],sat).
prove_tests(another_big_one,performance,[q v a v z v d v s v j v u v o v p v l v k v j v h v g v n v m v y v t v r v e v w v q,u v j v h v b,~o v p,~q v ~a,p,p v p v p v p v p v p v n v y v h v b v g v j v k v l,z v x v c v a v s v d v q v w v e v r v t v y v h v g v f v y v u v j v h v n v m v s v a v k,n v o v p v i v h v b v s v d v p v x],sat).
