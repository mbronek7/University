
zad4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800116  00800116  00000546  2**0
                  ALLOC
  3 .stab         00000f30  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d63  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 37       	cpi	r26, 0x7A	; 122
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 18 02 	call	0x430	; 0x430 <main>
  9e:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
  a6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24
  c6:	08 95       	ret

000000c8 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  c8:	90 91 c0 00 	lds	r25, 0x00C0
  cc:	95 ff       	sbrs	r25, 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <transmitByte>
  UDR0 = data;                                            /* send data */
  d0:	80 93 c6 00 	sts	0x00C6, r24
  d4:	08 95       	ret

000000d6 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  d6:	80 91 c0 00 	lds	r24, 0x00C0
  da:	87 ff       	sbrs	r24, 7
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <receiveByte>
  return UDR0;                                /* return register value */
  de:	80 91 c6 00 	lds	r24, 0x00C6
}
  e2:	08 95       	ret

000000e4 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  e4:	dc 01       	movw	r26, r24
  uint8_t i = 0;
  while (myString[i]) {
  e6:	2c 91       	ld	r18, X
  e8:	22 23       	and	r18, r18
  ea:	71 f0       	breq	.+28     	; 0x108 <printString+0x24>
  ec:	30 e0       	ldi	r19, 0x00	; 0
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  ee:	90 91 c0 00 	lds	r25, 0x00C0
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <printString+0xa>
  UDR0 = data;                                            /* send data */
  f6:	20 93 c6 00 	sts	0x00C6, r18

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
    transmitByte(myString[i]);
    i++;
  fa:	3f 5f       	subi	r19, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
  fc:	fd 01       	movw	r30, r26
  fe:	e3 0f       	add	r30, r19
 100:	f1 1d       	adc	r31, r1
 102:	20 81       	ld	r18, Z
 104:	21 11       	cpse	r18, r1
 106:	f3 cf       	rjmp	.-26     	; 0xee <printString+0xa>
 108:	08 95       	ret

0000010a <readString>:
    transmitByte(myString[i]);
    i++;
  }
}

void readString(char myString[], uint8_t maxLength) {
 10a:	dc 01       	movw	r26, r24
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	61 50       	subi	r22, 0x01	; 1
 110:	71 09       	sbc	r23, r1
 112:	16 16       	cp	r1, r22
 114:	17 06       	cpc	r1, r23
 116:	04 f5       	brge	.+64     	; 0x158 <readString+0x4e>
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = data;                                            /* send data */
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 11e:	90 91 c0 00 	lds	r25, 0x00C0
 122:	97 ff       	sbrs	r25, 7
 124:	fc cf       	rjmp	.-8      	; 0x11e <readString+0x14>
  return UDR0;                                /* return register value */
 126:	40 91 c6 00 	lds	r20, 0x00C6
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 12a:	90 91 c0 00 	lds	r25, 0x00C0
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <readString+0x20>
  UDR0 = data;                                            /* send data */
 132:	40 93 c6 00 	sts	0x00C6, r20
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
    response = receiveByte();
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
 136:	4d 30       	cpi	r20, 0x0D	; 13
 138:	51 f0       	breq	.+20     	; 0x14e <readString+0x44>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 13a:	fd 01       	movw	r30, r26
 13c:	e2 0f       	add	r30, r18
 13e:	f3 1f       	adc	r31, r19
 140:	40 83       	st	Z, r20
      i++;
 142:	5f 5f       	subi	r21, 0xFF	; 255

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 144:	25 2f       	mov	r18, r21
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	26 17       	cp	r18, r22
 14a:	37 07       	cpc	r19, r23
 14c:	44 f3       	brlt	.-48     	; 0x11e <readString+0x14>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 14e:	fd 01       	movw	r30, r26
 150:	e2 0f       	add	r30, r18
 152:	f3 1f       	adc	r31, r19
 154:	10 82       	st	Z, r1
 156:	08 95       	ret

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f8 cf       	rjmp	.-16     	; 0x14e <readString+0x44>

0000015e <printByte>:
  myString[i] = 0;                          /* terminal NULL character */
}

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 15e:	29 e2       	ldi	r18, 0x29	; 41
 160:	82 9f       	mul	r24, r18
 162:	21 2d       	mov	r18, r1
 164:	11 24       	eor	r1, r1
 166:	22 95       	swap	r18
 168:	2f 70       	andi	r18, 0x0F	; 15
 16a:	20 5d       	subi	r18, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 16c:	90 91 c0 00 	lds	r25, 0x00C0
 170:	95 ff       	sbrs	r25, 5
 172:	fc cf       	rjmp	.-8      	; 0x16c <printByte+0xe>
  UDR0 = data;                                            /* send data */
 174:	20 93 c6 00 	sts	0x00C6, r18
}

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 178:	2d ec       	ldi	r18, 0xCD	; 205
 17a:	82 9f       	mul	r24, r18
 17c:	91 2d       	mov	r25, r1
 17e:	11 24       	eor	r1, r1
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
 184:	96 95       	lsr	r25
 186:	92 9f       	mul	r25, r18
 188:	21 2d       	mov	r18, r1
 18a:	11 24       	eor	r1, r1
 18c:	26 95       	lsr	r18
 18e:	26 95       	lsr	r18
 190:	26 95       	lsr	r18
 192:	3a e0       	ldi	r19, 0x0A	; 10
 194:	23 9f       	mul	r18, r19
 196:	90 19       	sub	r25, r0
 198:	11 24       	eor	r1, r1
 19a:	20 e3       	ldi	r18, 0x30	; 48
 19c:	29 0f       	add	r18, r25
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 19e:	90 91 c0 00 	lds	r25, 0x00C0
 1a2:	95 ff       	sbrs	r25, 5
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <printByte+0x40>
  UDR0 = data;                                            /* send data */
 1a6:	20 93 c6 00 	sts	0x00C6, r18

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 1aa:	9d ec       	ldi	r25, 0xCD	; 205
 1ac:	89 9f       	mul	r24, r25
 1ae:	91 2d       	mov	r25, r1
 1b0:	11 24       	eor	r1, r1
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	96 95       	lsr	r25
 1b8:	2a e0       	ldi	r18, 0x0A	; 10
 1ba:	92 9f       	mul	r25, r18
 1bc:	80 19       	sub	r24, r0
 1be:	11 24       	eor	r1, r1
 1c0:	80 5d       	subi	r24, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 1c2:	90 91 c0 00 	lds	r25, 0x00C0
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <printByte+0x64>
  UDR0 = data;                                            /* send data */
 1ca:	80 93 c6 00 	sts	0x00C6, r24
 1ce:	08 95       	ret

000001d0 <printWord>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printWord(uint16_t word) {
 1d0:	ac 01       	movw	r20, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 1d2:	9c 01       	movw	r18, r24
 1d4:	32 95       	swap	r19
 1d6:	22 95       	swap	r18
 1d8:	2f 70       	andi	r18, 0x0F	; 15
 1da:	23 27       	eor	r18, r19
 1dc:	3f 70       	andi	r19, 0x0F	; 15
 1de:	23 27       	eor	r18, r19
 1e0:	a7 e4       	ldi	r26, 0x47	; 71
 1e2:	b3 e0       	ldi	r27, 0x03	; 3
 1e4:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	80 5d       	subi	r24, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 1f6:	90 91 c0 00 	lds	r25, 0x00C0
 1fa:	95 ff       	sbrs	r25, 5
 1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <printWord+0x26>
  UDR0 = data;                                            /* send data */
 1fe:	80 93 c6 00 	sts	0x00C6, r24
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 202:	9a 01       	movw	r18, r20
 204:	36 95       	lsr	r19
 206:	27 95       	ror	r18
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	a5 ec       	ldi	r26, 0xC5	; 197
 212:	b0 e2       	ldi	r27, 0x20	; 32
 214:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 218:	fc 01       	movw	r30, r24
 21a:	f2 95       	swap	r31
 21c:	e2 95       	swap	r30
 21e:	ef 70       	andi	r30, 0x0F	; 15
 220:	ef 27       	eor	r30, r31
 222:	ff 70       	andi	r31, 0x0F	; 15
 224:	ef 27       	eor	r30, r31
 226:	9f 01       	movw	r18, r30
 228:	ad ec       	ldi	r26, 0xCD	; 205
 22a:	bc ec       	ldi	r27, 0xCC	; 204
 22c:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	9c 01       	movw	r18, r24
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	e8 1b       	sub	r30, r24
 254:	f9 0b       	sbc	r31, r25
 256:	e0 5d       	subi	r30, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 258:	90 91 c0 00 	lds	r25, 0x00C0
 25c:	95 ff       	sbrs	r25, 5
 25e:	fc cf       	rjmp	.-8      	; 0x258 <printWord+0x88>
  UDR0 = data;                                            /* send data */
 260:	e0 93 c6 00 	sts	0x00C6, r30
}

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 264:	9a 01       	movw	r18, r20
 266:	36 95       	lsr	r19
 268:	27 95       	ror	r18
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	ab e7       	ldi	r26, 0x7B	; 123
 270:	b4 e1       	ldi	r27, 0x14	; 20
 272:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 276:	fc 01       	movw	r30, r24
 278:	f6 95       	lsr	r31
 27a:	e7 95       	ror	r30
 27c:	9f 01       	movw	r18, r30
 27e:	ad ec       	ldi	r26, 0xCD	; 205
 280:	bc ec       	ldi	r27, 0xCC	; 204
 282:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	9c 01       	movw	r18, r24
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	e8 1b       	sub	r30, r24
 2aa:	f9 0b       	sbc	r31, r25
 2ac:	e0 5d       	subi	r30, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2ae:	90 91 c0 00 	lds	r25, 0x00C0
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <printWord+0xde>
  UDR0 = data;                                            /* send data */
 2b6:	e0 93 c6 00 	sts	0x00C6, r30

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 2ba:	9a 01       	movw	r18, r20
 2bc:	ad ec       	ldi	r26, 0xCD	; 205
 2be:	bc ec       	ldi	r27, 0xCC	; 204
 2c0:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 2c4:	fc 01       	movw	r30, r24
 2c6:	f6 95       	lsr	r31
 2c8:	e7 95       	ror	r30
 2ca:	f6 95       	lsr	r31
 2cc:	e7 95       	ror	r30
 2ce:	f6 95       	lsr	r31
 2d0:	e7 95       	ror	r30
 2d2:	9f 01       	movw	r18, r30
 2d4:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	e8 1b       	sub	r30, r24
 2fc:	f9 0b       	sbc	r31, r25
 2fe:	e0 5d       	subi	r30, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 300:	90 91 c0 00 	lds	r25, 0x00C0
 304:	95 ff       	sbrs	r25, 5
 306:	fc cf       	rjmp	.-8      	; 0x300 <printWord+0x130>
  UDR0 = data;                                            /* send data */
 308:	e0 93 c6 00 	sts	0x00C6, r30
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 30c:	9a 01       	movw	r18, r20
 30e:	ad ec       	ldi	r26, 0xCD	; 205
 310:	bc ec       	ldi	r27, 0xCC	; 204
 312:	0e 94 3d 02 	call	0x47a	; 0x47a <__umulhisi3>
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	9c 01       	movw	r18, r24
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	82 0f       	add	r24, r18
 336:	93 1f       	adc	r25, r19
 338:	48 1b       	sub	r20, r24
 33a:	59 0b       	sbc	r21, r25
 33c:	40 5d       	subi	r20, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 33e:	90 91 c0 00 	lds	r25, 0x00C0
 342:	95 ff       	sbrs	r25, 5
 344:	fc cf       	rjmp	.-8      	; 0x33e <printWord+0x16e>
  UDR0 = data;                                            /* send data */
 346:	40 93 c6 00 	sts	0x00C6, r20
 34a:	08 95       	ret

0000034c <printBinaryByte>:
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
}

void printBinaryByte(uint8_t byte) {
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	1f 92       	push	r1
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 358:	27 e0       	ldi	r18, 0x07	; 7


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = data;                                            /* send data */
 35a:	41 e3       	ldi	r20, 0x31	; 49
 35c:	30 e3       	ldi	r19, 0x30	; 48

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    if (bit_is_set(byte, bit))
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <printBinaryByte+0x1e>
 366:	95 95       	asr	r25
 368:	87 95       	ror	r24
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <printBinaryByte+0x1a>
 36e:	80 ff       	sbrs	r24, 0
 370:	0c c0       	rjmp	.+24     	; 0x38a <printBinaryByte+0x3e>
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 372:	80 91 c0 00 	lds	r24, 0x00C0
 376:	85 ff       	sbrs	r24, 5
 378:	fc cf       	rjmp	.-8      	; 0x372 <printBinaryByte+0x26>
  UDR0 = data;                                            /* send data */
 37a:	40 93 c6 00 	sts	0x00C6, r20
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	70 f7       	brcc	.-36     	; 0x35e <printBinaryByte+0x12>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 38a:	80 91 c0 00 	lds	r24, 0x00C0
 38e:	85 ff       	sbrs	r24, 5
 390:	fc cf       	rjmp	.-8      	; 0x38a <printBinaryByte+0x3e>
  UDR0 = data;                                            /* send data */
 392:	30 93 c6 00 	sts	0x00C6, r19
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 396:	21 50       	subi	r18, 0x01	; 1
 398:	10 f7       	brcc	.-60     	; 0x35e <printBinaryByte+0x12>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 3a2:	8a 30       	cpi	r24, 0x0A	; 10
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
  }
  else {
    return ('A' + nibble - 10);
 3a6:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 3a8:	08 95       	ret
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    return ('0' + nibble);
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	08 95       	ret

000003ae <printHexByte>:
}

void printHexByte(uint8_t byte) {
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
 3ae:	98 2f       	mov	r25, r24
 3b0:	92 95       	swap	r25
 3b2:	9f 70       	andi	r25, 0x0F	; 15
  }
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 3b4:	9a 30       	cpi	r25, 0x0A	; 10
 3b6:	a8 f4       	brcc	.+42     	; 0x3e2 <printHexByte+0x34>
    return ('0' + nibble);
 3b8:	20 e3       	ldi	r18, 0x30	; 48
 3ba:	29 0f       	add	r18, r25
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 3bc:	90 91 c0 00 	lds	r25, 0x00C0
 3c0:	95 ff       	sbrs	r25, 5
 3c2:	fc cf       	rjmp	.-8      	; 0x3bc <printHexByte+0xe>
  UDR0 = data;                                            /* send data */
 3c4:	20 93 c6 00 	sts	0x00C6, r18
void printHexByte(uint8_t byte) {
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
 3c8:	8f 70       	andi	r24, 0x0F	; 15
  }
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 3ca:	8a 30       	cpi	r24, 0x0A	; 10
 3cc:	40 f4       	brcc	.+16     	; 0x3de <printHexByte+0x30>
    return ('0' + nibble);
 3ce:	80 5d       	subi	r24, 0xD0	; 208
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 3d0:	90 91 c0 00 	lds	r25, 0x00C0
 3d4:	95 ff       	sbrs	r25, 5
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <printHexByte+0x22>
  UDR0 = data;                                            /* send data */
 3d8:	80 93 c6 00 	sts	0x00C6, r24
 3dc:	08 95       	ret
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    return ('0' + nibble);
  }
  else {
    return ('A' + nibble - 10);
 3de:	89 5c       	subi	r24, 0xC9	; 201
 3e0:	f7 cf       	rjmp	.-18     	; 0x3d0 <printHexByte+0x22>
 3e2:	27 e3       	ldi	r18, 0x37	; 55
 3e4:	29 0f       	add	r18, r25
 3e6:	ea cf       	rjmp	.-44     	; 0x3bc <printHexByte+0xe>

000003e8 <getNumber>:
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	30 e3       	ldi	r19, 0x30	; 48
 3ec:	40 e3       	ldi	r20, 0x30	; 48
 3ee:	90 91 c0 00 	lds	r25, 0x00C0
 3f2:	97 ff       	sbrs	r25, 7
 3f4:	fc cf       	rjmp	.-8      	; 0x3ee <getNumber+0x6>
 3f6:	20 91 c6 00 	lds	r18, 0x00C6
 3fa:	90 91 c0 00 	lds	r25, 0x00C0
 3fe:	95 ff       	sbrs	r25, 5
 400:	fc cf       	rjmp	.-8      	; 0x3fa <getNumber+0x12>
 402:	20 93 c6 00 	sts	0x00C6, r18
 406:	2d 30       	cpi	r18, 0x0D	; 13
 408:	21 f0       	breq	.+8      	; 0x412 <getNumber+0x2a>
 40a:	43 2f       	mov	r20, r19
 40c:	38 2f       	mov	r19, r24
 40e:	82 2f       	mov	r24, r18
 410:	ee cf       	rjmp	.-36     	; 0x3ee <getNumber+0x6>
 412:	80 53       	subi	r24, 0x30	; 48
 414:	40 53       	subi	r20, 0x30	; 48
 416:	98 2f       	mov	r25, r24
 418:	24 e6       	ldi	r18, 0x64	; 100
 41a:	42 9f       	mul	r20, r18
 41c:	90 0d       	add	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	33 0f       	add	r19, r19
 422:	30 56       	subi	r19, 0x60	; 96
 424:	83 2f       	mov	r24, r19
 426:	88 0f       	add	r24, r24
 428:	88 0f       	add	r24, r24
 42a:	83 0f       	add	r24, r19
 42c:	89 0f       	add	r24, r25
 42e:	08 95       	ret

00000430 <main>:
char String [100];
uint8_t maxLength = 99;
int main(void) {
 char serialCharacter;
 // -------- Inits --------- //
 LED_DDR = 0xff; /* set up LEDs for output */
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	84 b9       	out	0x04, r24	; 4
 initUSART();
 434:	0e 94 53 00 	call	0xa6	; 0xa6 <initUSART>
 printString("What's your name:\r\n"); /* to test */
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 72 00 	call	0xe4	; 0xe4 <printString>
 readString(String,maxLength);
 440:	60 91 00 01 	lds	r22, 0x0100
 444:	86 e1       	ldi	r24, 0x16	; 22
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 85 00 	call	0x10a	; 0x10a <readString>
 printString(String);
 44c:	86 e1       	ldi	r24, 0x16	; 22
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 72 00 	call	0xe4	; 0xe4 <printString>
 // ------ Event loop ------ //
 while (1) {
 printString("What's your name:\r\n"); /* to test */
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 72 00 	call	0xe4	; 0xe4 <printString>
 readString(String,maxLength);
 45c:	60 91 00 01 	lds	r22, 0x0100
 460:	86 e1       	ldi	r24, 0x16	; 22
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 85 00 	call	0x10a	; 0x10a <readString>
 printString("\n");
 468:	83 e1       	ldi	r24, 0x13	; 19
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 72 00 	call	0xe4	; 0xe4 <printString>
 printString(String);
 470:	86 e1       	ldi	r24, 0x16	; 22
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 72 00 	call	0xe4	; 0xe4 <printString>
 /* display ascii/numeric value of character */
 } /* End event loop */
 478:	ed cf       	rjmp	.-38     	; 0x454 <main+0x24>

0000047a <__umulhisi3>:
 47a:	a2 9f       	mul	r26, r18
 47c:	b0 01       	movw	r22, r0
 47e:	b3 9f       	mul	r27, r19
 480:	c0 01       	movw	r24, r0
 482:	a3 9f       	mul	r26, r19
 484:	70 0d       	add	r23, r0
 486:	81 1d       	adc	r24, r1
 488:	11 24       	eor	r1, r1
 48a:	91 1d       	adc	r25, r1
 48c:	b2 9f       	mul	r27, r18
 48e:	70 0d       	add	r23, r0
 490:	81 1d       	adc	r24, r1
 492:	11 24       	eor	r1, r1
 494:	91 1d       	adc	r25, r1
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
